*Functionality*
- Support more analyzers (i.e. other than StandardAnalyzer), including constructing custom ones using TokenStreams
- Support custom Similarity.
- generate documentation from proto files? https://github.com/pseudomuto/protoc-gen-doc
  or https://github.com/sourcegraph/prototools/blob/master/README.doc.md
- add suggest functionality
- remove boost option from RegisterHandler since individual fields can no longer setBoost while indexing:https://issues.apache.org/jira/browse/LUCENE-6819
- support nested docs (both indexing and searching time)


*Potential bugs/issues*
- Seems like only SortedSetDocValuesWriter and SortedNumericDocValuesWriter allow doc values to be indexed for multiValued fields:
  So only use SortedSetDocValuesWriter for text and atom field types when multiValued: true?
  curl -XPOST localhost:4000/registerFields -d '{"indexName": "old1", "fields": {"vendor_name4": {"type": "text", "multiValued": true, "storeDocValues": true}}}'
  curl -XPOST localhost:4000/addDocument -d '{"indexName": "old1", "fields": {"vendor_name4": ["vendor one", "vendor two"]}}'
  java.lang.IllegalArgumentException: DocValuesField "vendor_name4" appears more than once in this document (only one value is allowed per field)
          at org.apache.lucene.index.BinaryDocValuesWriter.addValue(BinaryDocValuesWriter.java:70)
- Call commit after registerFields? Else the Field states is not durable
- Separate out committing state (for registerFields, settings, liveSettings) from being done only upon committing an index

*Enhancements*
- Support highlights at search time
- Support facets at search time
- Support blockJoinQuery parent-child
- Specify searcher in search request
  - from a previous snapshot (during indexing we have option to keep previous states of the indexes)
  - from a previous index gen e.g. before calling addDocument (which returns indexGen) at a point in time
  - the latest searcher

- Option to applyDeletes on searches
  - do we want SearchAndTaxonomyReferenceManager to ignore recently deleted documents while they are still actually
  on disk (somewhat faster?) or do we not want to score on the recently deleted ones since we have access to this information in `Bits`

- Make per shard have limit of 50000000 docs? i.e. "writableShard.writer.maxDoc() > 50000000 then shardState.addShard(ord+1)?"


*Performance*
- support searching over segments in parallel: https://issues.apache.org/jira/browse/LUCENE-6294. See: `TestTopDocsCollector.doConcurrentSearchWithThreshold`
which creates a CollectorManager

- create threadpool and use threads for indexing chunks
